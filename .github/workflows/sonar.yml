name: SonarCloud CI & Security Report (.NET)

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  sonarcloud:
    name: SonarCloud Scan, Build, and Generate Report
    runs-on: windows-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}

    steps:
      # 1. Checkout โค้ดจาก GitHub
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3. Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # 4. เริ่มการสแกนด้วย SonarCloud
      - name: Begin SonarCloud Analysis
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECTKEY }}" /o:"${{ env.SONAR_ORGANIZATION }}" /d:sonar.login="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}"

      # 5. Build Project
      - name: Build the project
        run: dotnet build --no-incremental --configuration Release

      # 6. (Optional) Run Tests
      - name: Run tests
        run: dotnet test --no-build --verbosity normal || true

      # 7. จบการสแกนและส่งผลไปยัง SonarCloud
      - name: End SonarCloud Analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"

      # 8. ตรวจสอบสถานะ Quality Gate
      - name: Check Quality Gate status
        id: qualitygate
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          response=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECTKEY")
          echo "Response: $response"
          status=$(echo $response | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $status"
          echo "status=$status" >> $GITHUB_ENV

      # 9. สร้างรายงาน PDF
      - name: Generate PDF Report
        if: always()
        run: |
          echo "Generating SonarCloud PDF Report..."
          pip install reportlab requests beautifulsoup4 pytz
          python <<'EOF'
          import os
          import pytz
          import requests
          from datetime import datetime
          from bs4 import BeautifulSoup
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas
          from reportlab.lib import colors
          from reportlab.platypus import Table, TableStyle, Paragraph
          from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
          from reportlab.lib.enums import TA_LEFT

          TOKEN = os.getenv("SONAR_TOKEN")
          PROJECT_KEY = os.getenv("SONAR_PROJECTKEY")
          HOST = os.getenv("SONAR_HOST_URL")
          ORG = os.getenv("SONAR_ORGANIZATION")
          output_path = "Sonar_Report.pdf"

          # เวลาไทย
          bangkok_tz = pytz.timezone("Asia/Bangkok")
          local_time = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M")

          # ดึงข้อมูลจาก SonarCloud
          metrics_url = f"{HOST}/api/measures/component?component={PROJECT_KEY}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
          issues_url = f"{HOST}/api/issues/search?componentKeys={PROJECT_KEY}&statuses=OPEN,CONFIRMED,REOPENED&ps=500"
          hotspots_url = f"{HOST}/api/hotspots/search?projectKey={PROJECT_KEY}&status=TO_REVIEW&ps=500"

          metrics = requests.get(metrics_url, auth=(TOKEN, "")).json()
          issues = requests.get(issues_url, auth=(TOKEN, "")).json().get("issues", [])
          hotspots = requests.get(hotspots_url, auth=(TOKEN, "")).json().get("hotspots", [])

          m = {item["metric"]: item["value"] for item in metrics.get("component", {}).get("measures", [])}
          total_issues = len(issues)
          coverage = m.get("coverage", "N/A")

          # ตรวจสอบ Quality Gate
          status_url = f"{HOST}/api/qualitygates/project_status?projectKey={PROJECT_KEY}"
          status_response = requests.get(status_url, auth=(TOKEN, "")).json()
          quality_status = status_response.get("projectStatus", {}).get("status", "UNKNOWN")

          # เริ่มสร้าง PDF
          c = canvas.Canvas(output_path, pagesize=A4)
          width, height = A4
          y = height - 70
          c.setFont("Helvetica-Bold", 16)
          c.drawString(70, y, "SonarCloud Security & Code Quality Report")
          y -= 25
          c.setFont("Helvetica", 11)
          c.drawString(70, y, f"Project: {PROJECT_KEY}")
          y -= 14
          c.drawString(70, y, f"Host: {HOST}")
          y -= 14
          c.drawString(70, y, f"Date: {local_time}")
          y -= 18
          c.setFont("Helvetica-Bold", 11)
          c.drawString(70, y, f"Total Issues: {total_issues}")
          y -= 14
          c.drawString(70, y, f"Coverage: {coverage}%")
          y -= 18
          c.drawString(70, y, f"Security Hotspots: {len(hotspots)}")
          y -= 18
          c.setFont("Helvetica-Bold", 11)
          c.drawString(70, y, "Quality Gate: ")
          if quality_status == "OK":
              c.setFillColor(colors.green)
              c.drawString(150, y, "PASSED")
          else:
              c.setFillColor(colors.red)
              c.drawString(150, y, "FAILED")
          c.setFillColor(colors.black)
          c.save()
          EOF

      # 10. อัปโหลด PDF
      - name: Upload PDF Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-report
          path: Sonar_Report.pdf

      # 11. Fail หาก Quality Gate ไม่ผ่าน
      - name: Fail if Quality Gate failed
        if: env.status != 'OK'
        run: |
          echo "SonarCloud Quality Gate failed. Please review the issues in SonarCloud dashboard."
          exit 1
